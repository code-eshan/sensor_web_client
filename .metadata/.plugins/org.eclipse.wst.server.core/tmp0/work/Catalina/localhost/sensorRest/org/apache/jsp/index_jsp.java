/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.17
 * Generated at: 2020-05-01 14:15:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width-device-width, initial-scale=1.0\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"ie-edge\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <h2>Fire Alarm Sensor Details</h2>\r\n");
      out.write("    \r\n");
      out.write("    <table class=\"table table-stripped\">\r\n");
      out.write("    \r\n");
      out.write("    <!-- Table Header is set -->\r\n");
      out.write("    <tr>\r\n");
      out.write("    <th>Sensor ID</th>\r\n");
      out.write("    <th>Status</th>\r\n");
      out.write("    <th>Floor Number</th>\r\n");
      out.write("    <th>Room Number</th>\r\n");
      out.write("    <th>Smoke Level</th>\r\n");
      out.write("    <th>CO2 Level</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("    \r\n");
      out.write("    <!-- Table Body is set with an id as data -->\r\n");
      out.write("    <tbody id=\"data\">\r\n");
      out.write("    \r\n");
      out.write("    </tbody>\r\n");
      out.write("    \r\n");
      out.write("    </table>\r\n");
      out.write("    \r\n");
      out.write("    <!-- Start of script tag -->\r\n");
      out.write("    <script>\r\n");
      out.write("    \r\n");
      out.write("    //The main function\r\n");
      out.write("    function startFetchingData() {\r\n");
      out.write("    \t\r\n");
      out.write("    \t//This function sets a time which re calls the same function again\r\n");
      out.write("    \tsetInterval(function () {\r\n");
      out.write("    \t\t\r\n");
      out.write("    \t\t//Fetch the response received from the path which returns the data\r\n");
      out.write("    \t\t //in JSON format -->\r\n");
      out.write("    \t\tfetch(\"http://localhost:8080/sensorRest/webapi/sensors\").then(\r\n");
      out.write("    \t    \t\tfunction(res) {\r\n");
      out.write("    \t    \t\t\t// getting the JSON type data from the response and passing\r\n");
      out.write("    \t    \t\t\t //it onto a function -->\r\n");
      out.write("    \t    \t\t\tres.json().then(\r\n");
      out.write("    \t    \t\t\t\tfunction(data) {\r\n");
      out.write("    \t    \t\t\t\t\t//To ensure that the data is getting retrieved -->\r\n");
      out.write("    \t    \t\t\t\t\tconsole.log(data);\r\n");
      out.write("    \t    \t\t\t\t\t// If data is not empty -->\r\n");
      out.write("    \t    \t\t\t\t\tif(data.length > 0) {\r\n");
      out.write("    \t    \t\t\t\t\t\t// creating a temporary variable for holding tags and data that\r\n");
      out.write("    \t    \t\t\t\t\t\t //is going to be overwritten-->\r\n");
      out.write("    \t    \t\t\t\t\t\tvar temp = \"\";\r\n");
      out.write("\r\n");
      out.write("    \t    \t\t\t\t\t\t// Accessing the data one by one and passing the content\r\n");
      out.write("    \t    \t\t\t\t\t\t //into an object as u -->\r\n");
      out.write("    \t    \t\t\t\t\t\tdata.forEach(function(u) {\r\n");
      out.write("    \t    \t\t\t\t\t\t\t\r\n");
      out.write("    \t    \t\t\t\t\t\t\t// checking if the smoke level or co2 level is above 5\r\n");
      out.write("    \t    \t\t\t\t\t\t\t //if yes all the text color in that section would have\r\n");
      out.write("    \t    \t\t\t\t\t\t\t //a style of red color -->\r\n");
      out.write("    \t    \t\t\t\t\t\t\tif((u.sLevel > 5) || (u.cLevel > 5)) {\r\n");
      out.write("    \t    \t\t\t\t\t\t\t\t\r\n");
      out.write("    \t    \t\t\t\t\t\t\t\ttemp += \"<tr>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += '<td style=\"color:red\">' + u.id + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\t\r\n");
      out.write("    \t        \t\t\t\t\t\t\t//if status is true it is set as active\r\n");
      out.write("    \t        \t\t\t\t\t\t\t //else it is said inactive -->\r\n");
      out.write("    \t        \t\t\t\t\t\t\tif(u.status) {\r\n");
      out.write("    \t        \t\t\t\t\t\t\t\ttemp += '<td style=\"color:red\">' + \"active\" + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\t} else {\r\n");
      out.write("    \t        \t\t\t\t\t\t\t\ttemp += '<td style=\"color:red\">' + \"inactive\" + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\t}\r\n");
      out.write("    \t        \t\t\t\t\t\t\t\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += '<td style=\"color:red\">' + u.floorNum + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += '<td style=\"color:red\">' + u.roomNum + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += '<td style=\"color:red\">' + u.sLevel + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += '<td style=\"color:red\">' + u.cLevel + \"</td></tr>\";\r\n");
      out.write("    \t    \t\t\t\t\t\t\t}\r\n");
      out.write("    \t    \t\t\t\t\t\t\telse {\r\n");
      out.write("    \t   \r\n");
      out.write("    \t    \t\t\t\t\t\t\t\t// if there is no need of changing colors, it is set normally\r\n");
      out.write("    \t    \t\t\t\t\t\t\t\t //as a row without any beautification -->\r\n");
      out.write("    \t    \t\t\t\t\t\t\t\ttemp += \"<tr>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += \"<td>\" + u.id + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\tif(u.status) {\r\n");
      out.write("    \t        \t\t\t\t\t\t\t\ttemp += \"<td>\" + \"active\" + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\t} else {\r\n");
      out.write("    \t        \t\t\t\t\t\t\t\ttemp += \"<td>\" + \"inactive\" + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\t}\r\n");
      out.write("    \t        \t\t\t\t\t\t\t\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += \"<td>\" + u.floorNum + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += \"<td>\" + u.roomNum + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += \"<td>\" + u.sLevel + \"</td>\";\r\n");
      out.write("    \t        \t\t\t\t\t\t\ttemp += \"<td>\" + u.cLevel + \"</td></tr>\";\r\n");
      out.write("    \t    \t\t\t\t\t\t\t}\r\n");
      out.write("    \t    \t\t\t\t\t\t\t\r\n");
      out.write("    \t    \t\t\t\t\t\t});\r\n");
      out.write("    \t    \t\t\t\t\t\t//----- close for loop\r\n");
      out.write("    \t    \t\t\t\t\t\t\r\n");
      out.write("    \t    \t\t\t\t\t\t // the data element is overwritten with the codes in temp variable -->\r\n");
      out.write("    \t    \t\t\t\t\t\tdocument.getElementById(\"data\").innerHTML = temp;\r\n");
      out.write("    \t    \t\t\t\t\t}\r\n");
      out.write("    \t    \t\t\t\t}\t\t\r\n");
      out.write("    \t    \t\t\t)\r\n");
      out.write("    \t    \t\t}\r\n");
      out.write("    \t    )\r\n");
      out.write("    \t    console.log('-----------15 seconds----------');\r\n");
      out.write("    \t},15000);\r\n");
      out.write("    \t\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    //when the DOM is loaded, the main method is called\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', function () {\r\n");
      out.write("    \tstartFetchingData();\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    // End of script tag -->\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
